#!/usr/local/bin/perl

//cgap-dev.nci.nih.gov/KEGG";
//cgap-prot.nci.nih.gov/KEGG";
Escape;
Escape; 
HiRes qw(usleep ualarm gettimeofday tv_interval);
Hostname;
URL; 
use Antibody;
use Bayesian;
use Bayesian_no_C_lib;
use Blocks;
use Cache;
use  CGAPConfig;
use CGAPConfig;
use CGAPGene;
use CGAPLib;
use CGI;
use constant BASE     => "";
use constant BLACK => "000000";
use constant BLAST_QUERY_SERVER_PORT => "8003";
use constant BLOCKSIZE => 4096;
use constant CACHE_ID_FILE           => CACHE_ROOT     . "cache_id";
use constant CACHE_QUERY_ROOT        => INIT_DATA_HOME . "DK_cache/";
use constant CACHE_ROOT              => INIT_DATA_HOME . "cache/";
use constant CATALYST      => 1;
use constant COENZYME  => 5;
use constant CYT_SERVER_PORT         => "8002";
use constant $DB_INSTANCE     => "cgprod";
use constant $DB_INSTANCE     => "lpg";
use constant$DB_PASS         => "readonly";
use constant$DB_USER         => "web";
use constant ERROR   => 0;
use constant FIRST_CACHE_ID => 1;
use constant FISH_CACHE_PREFIX       => "FISH";
use constant GENE_CACHE_PREFIX       => "GENE";
use constant GENE_CACHE_ROOT         => INIT_DATA_HOME . "cache/GENE_INPUT";
use constant GENE_SERVER_PORT        => "0000";
use constant GL_CACHE_PREFIX         => "GL";
use constant GL_SERVER_PORT          => "8006";
use constant GXS_CACHE_PREFIX        => "GXS";
use constant GXS_ROWS_PER_PAGE => 300;
use constant GXS_SERVER_PORT         => "8005";
use constant HDR_SZ => 7;
use constant HIGHEST_PID_ERROR_CODE => 100;
use constant HOURS_TO_LIVE => 5;
use constant HS_GL_DATA              => INIT_DATA_HOME . "Hs_gl.dat";
use constant HS_GXS_DATA        => INIT_DATA_HOME . "Hs_gxs.dat";
use constant HS_UG_BLAST        => INIT_DATA_HOME . "Hs.seq.all";
use constant HS_UG_BLAST        => INIT_DATA_HOME . "Hs.seq.all_for_blast";
use constant IMG_DIR  => "/images";
use constant INIT_DATA_HOME          => "/cgap/webcontent/CGAP/dev/data/";
use constant INIT_DATA_HOME          => "/share/content/CGAP/data/";
use constant INIT_DATA_HOME          => "/space/CGAP/data/";
use constant INIT_SAGE_DATA_HOME     => "/share/content/CGAP/data/";
use constant INIT_SAGE_DATA_HOME     => "/space/CGAP/data/";
use constant INVALID => 2;
use constant ITEMS_PER_PAGE    => 300;
use constant KEGG_ARCFILE   => KEGG_DATA_HOME . "Arc.dat";
use constant KEGG_COMPOUND  => KEGG_DATA_HOME . "entry_table";
use constant KEGG_COORDFILE => KEGG_DATA_HOME . "KeggCoords.dat";
use constant KEGG_DATA_HOME          => "/share/content/CGAP/data/";
use constant KEGG_DATA_HOME          => "/space/CGAP/data/";
use constant KEGG_ENZYME    => KEGG_DATA_HOME . "KeggEnzymes.dat";
use constant KEGG_GENEFILE  => KEGG_DATA_HOME . "Gene_Product.dat";
use constant KEGG_NAMEFILE  => KEGG_DATA_HOME . "Pathway_name.dat";
use constant KEGG_NODEFILE  => KEGG_DATA_HOME . "Node.dat";
use constant KEGG_PATHFILE  => KEGG_DATA_HOME . "Pathway.dat";
use constant LENGTH_OF_ARRARY  => 300;
use constant LIBRARY_SERVER_PORT     => "0000";
use constant LICR_CACHE_PREFIX       => "LICR";
use constant LIMIT_LENGTH => 0;
use constant LN10 => log(10);
use constant LN2 => log(2);
use constant LOG2 => log(2);
use constant MANY_SAGE_LIBRARIES => 0;
use constant MAX_CACHE => 500;
use constant MAX_CACHE_ID   => 500;
use constant MAX_LONG_LEN => 16384;
use constant MAX_LONG_LEN       => 16384;
use constant MAX_LONG_LEN       => 40000;
use constant MAX_ROWS_PER_FETCH => 1000;
use constant MAX_TRIES      => 30;
use constant MICROARRAY_CACHE_PREFIX => "MC";
use constant MICROARRAY_SERVER_PORT  => "8008";
use constant MICROARRAY_SERVER_PORT  => "8888";
use constant MM_GL_DATA              => INIT_DATA_HOME . "Mm_gl.dat";
use constant MM_GXS_DATA        => INIT_DATA_HOME . "Mm_gxs.dat";
use constant MM_UG_BLAST        => INIT_DATA_HOME . "Mm.seq.all";
use constant MM_UG_BLAST        => INIT_DATA_HOME . "Mm.seq.all_for_blast";
use constant NCI60_RAW       => INIT_DATA_HOME . "discover.raw";
use constant NCI60_STATS     => INIT_DATA_HOME . "discover.stats";
use constant NCI60_VIEW      => INIT_DATA_HOME . "discover.view";
use constant NO => "1";
use constant NOVARTIS_RAW       => INIT_DATA_HOME . "novartis.raw";
use constant NOVARTIS_STATS     => INIT_DATA_HOME . "novartis.stats";
use constant NOVARTIS_VIEW      => INIT_DATA_HOME . "novartis.view";
use constant OK      => 1;
use constant ORACLE_LIST_LIMIT => 500;
use constant ORACLE_LIST_LIMIT  => 500;
use constant PATHWAY_SERVER_PORT     => "8007";
use constant PRODUCT_OF    => 3;
use constant RNAi_CACHE_PREFIX       => "RNAi";
use constant ROWS_PER_SUBTABLE => 100;
use constant RUNNING_CGAP_SCHEMA => 'cgap';
use constant RUNNING_CGAP_SCHEMA => 'cgap2';
use constant SAFE_IPS =>
use constant SAGEFREQ           => INIT_SAGE_DATA_HOME . "sagefreq.dat";
use constant SAGE_GROUP_RAW     => INIT_DATA_HOME . "sage_group.raw";
use constant SAGE_GROUP_STATS   => INIT_DATA_HOME . "sage_group.stats";
use constant SAGE_GROUP_VIEW    => INIT_DATA_HOME . "sage_group.view";
use constant SAGE_RAW           => INIT_DATA_HOME . "sage.raw";
use constant SAGE_STATS         => INIT_DATA_HOME . "sage.stats";
use constant SAGE_VIEW          => INIT_DATA_HOME . "sage.view";
use constant S_BAD_REQUEST   => '3';
use constant SDGED_CACHE_PREFIX      => "SDGED";
use constant SDGED_RESULTS_CACHE_PREFIX      => "SDGED_RESULTS";
use constant S_NO_DATA       => '2';
use constant S_OK            => '1';
use constant S_RECEIVE_FAIL  => '5';
use constant S_REQUEST       => '0';
use constant S_RESPONSE_FAIL => '4';
use constant SUBSTRATE_FOR => 2;
use constant TIME_TO_LIVE  => HOURS_TO_LIVE * 60 * 60;
use constant XP_CACHE_PREFIX         => "XP";
use constant YES => "0";
use cor;
use CytSearchServer;
use DBI;
use DB_SCHEMAConfig;
use DigitalFISH;
use Draw_SVG;
use Exporter ();
use FileHandle;
use FisherExact;
use GD;
use GenomeExpression;
use GetPvalueForT;
use GLServer;
use GOBrowser;
use GOBrowser_2;
use GXS;
use lib "/app/oracle/product/10gClient/lib"; 
use lib "/usr/local/cgap/lib/perl/";
use LICRGene;
use MicroArray;
use Paging;
use POSIX qw(tmpnam);
use RNAi;
use Scan;
use ServerSupport;
use Socket;
use SPQuery;
use strict;
use SVG;
use TESTSVG;
